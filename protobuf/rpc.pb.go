// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	XactReq
	XactResp
	CommitReq
	CommitResp
	HealthCheckReq
	HealthCheckResp
	PingReq
	PingResp
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type XactReq struct {
	Key       string                     `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value     string                     `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *XactReq) Reset()                    { *m = XactReq{} }
func (m *XactReq) String() string            { return proto.CompactTextString(m) }
func (*XactReq) ProtoMessage()               {}
func (*XactReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *XactReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *XactReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *XactReq) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type XactResp struct {
	CommitSuccess bool                       `protobuf:"varint,1,opt,name=commit_success,json=commitSuccess" json:"commit_success,omitempty"`
	Timestamp     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *XactResp) Reset()                    { *m = XactResp{} }
func (m *XactResp) String() string            { return proto.CompactTextString(m) }
func (*XactResp) ProtoMessage()               {}
func (*XactResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *XactResp) GetCommitSuccess() bool {
	if m != nil {
		return m.CommitSuccess
	}
	return false
}

func (m *XactResp) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type CommitReq struct {
	Xid       int32                      `protobuf:"varint,1,opt,name=xid" json:"xid,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CommitReq) Reset()                    { *m = CommitReq{} }
func (m *CommitReq) String() string            { return proto.CompactTextString(m) }
func (*CommitReq) ProtoMessage()               {}
func (*CommitReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommitReq) GetXid() int32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *CommitReq) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type CommitResp struct {
	Xid       int32                      `protobuf:"varint,1,opt,name=xid" json:"xid,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CommitResp) Reset()                    { *m = CommitResp{} }
func (m *CommitResp) String() string            { return proto.CompactTextString(m) }
func (*CommitResp) ProtoMessage()               {}
func (*CommitResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommitResp) GetXid() int32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *CommitResp) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type HealthCheckReq struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *HealthCheckReq) Reset()                    { *m = HealthCheckReq{} }
func (m *HealthCheckReq) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckReq) ProtoMessage()               {}
func (*HealthCheckReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HealthCheckReq) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type HealthCheckResp struct {
	Timestamp  *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	StatusCode int32                      `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
}

func (m *HealthCheckResp) Reset()                    { *m = HealthCheckResp{} }
func (m *HealthCheckResp) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResp) ProtoMessage()               {}
func (*HealthCheckResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HealthCheckResp) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *HealthCheckResp) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type PingReq struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PingReq) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type PingResp struct {
	Timestamp  *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	StatusCode int32                      `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
}

func (m *PingResp) Reset()                    { *m = PingResp{} }
func (m *PingResp) String() string            { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()               {}
func (*PingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PingResp) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PingResp) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func init() {
	proto.RegisterType((*XactReq)(nil), "rpc.XactReq")
	proto.RegisterType((*XactResp)(nil), "rpc.XactResp")
	proto.RegisterType((*CommitReq)(nil), "rpc.CommitReq")
	proto.RegisterType((*CommitResp)(nil), "rpc.CommitResp")
	proto.RegisterType((*HealthCheckReq)(nil), "rpc.HealthCheckReq")
	proto.RegisterType((*HealthCheckResp)(nil), "rpc.HealthCheckResp")
	proto.RegisterType((*PingReq)(nil), "rpc.PingReq")
	proto.RegisterType((*PingResp)(nil), "rpc.PingResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCService service

type RPCServiceClient interface {
	// RequestTransaction
	// Sent by Master node to Slaves to prepare a transaction
	// Slaves report the transaction status
	RequestTransactionTry(ctx context.Context, opts ...grpc.CallOption) (RPCService_RequestTransactionTryClient, error)
	RequestTransactionCommit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitResp, error)
	HealthCheck(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type rPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCServiceClient(cc *grpc.ClientConn) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) RequestTransactionTry(ctx context.Context, opts ...grpc.CallOption) (RPCService_RequestTransactionTryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCService_serviceDesc.Streams[0], c.cc, "/rpc.RPCService/RequestTransactionTry", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceRequestTransactionTryClient{stream}
	return x, nil
}

type RPCService_RequestTransactionTryClient interface {
	Send(*XactReq) error
	Recv() (*XactResp, error)
	grpc.ClientStream
}

type rPCServiceRequestTransactionTryClient struct {
	grpc.ClientStream
}

func (x *rPCServiceRequestTransactionTryClient) Send(m *XactReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCServiceRequestTransactionTryClient) Recv() (*XactResp, error) {
	m := new(XactResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCServiceClient) RequestTransactionCommit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitResp, error) {
	out := new(CommitResp)
	err := grpc.Invoke(ctx, "/rpc.RPCService/RequestTransactionCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) HealthCheck(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckResp, error) {
	out := new(HealthCheckResp)
	err := grpc.Invoke(ctx, "/rpc.RPCService/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := grpc.Invoke(ctx, "/rpc.RPCService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCService service

type RPCServiceServer interface {
	// RequestTransaction
	// Sent by Master node to Slaves to prepare a transaction
	// Slaves report the transaction status
	RequestTransactionTry(RPCService_RequestTransactionTryServer) error
	RequestTransactionCommit(context.Context, *CommitReq) (*CommitResp, error)
	HealthCheck(context.Context, *HealthCheckReq) (*HealthCheckResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
}

func RegisterRPCServiceServer(s *grpc.Server, srv RPCServiceServer) {
	s.RegisterService(&_RPCService_serviceDesc, srv)
}

func _RPCService_RequestTransactionTry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServiceServer).RequestTransactionTry(&rPCServiceRequestTransactionTryServer{stream})
}

type RPCService_RequestTransactionTryServer interface {
	Send(*XactResp) error
	Recv() (*XactReq, error)
	grpc.ServerStream
}

type rPCServiceRequestTransactionTryServer struct {
	grpc.ServerStream
}

func (x *rPCServiceRequestTransactionTryServer) Send(m *XactResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCServiceRequestTransactionTryServer) Recv() (*XactReq, error) {
	m := new(XactReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPCService_RequestTransactionCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).RequestTransactionCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RPCService/RequestTransactionCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).RequestTransactionCommit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RPCService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).HealthCheck(ctx, req.(*HealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RPCService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestTransactionCommit",
			Handler:    _RPCService_RequestTransactionCommit_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RPCService_HealthCheck_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RPCService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestTransactionTry",
			Handler:       _RPCService_RequestTransactionTry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x41, 0x6f, 0xe2, 0x30,
	0x10, 0x85, 0x15, 0x58, 0x16, 0x32, 0x2c, 0xb0, 0xf2, 0xb2, 0x52, 0x94, 0x0b, 0x88, 0xaa, 0x12,
	0xa7, 0x50, 0xd1, 0x4b, 0xa5, 0x1e, 0x73, 0xa9, 0x7a, 0x42, 0x06, 0xa9, 0xdc, 0x90, 0x31, 0x2e,
	0x44, 0x49, 0xb0, 0x89, 0x1d, 0x54, 0xfe, 0x6e, 0x7f, 0x49, 0x15, 0x3b, 0xa1, 0x44, 0x9c, 0x28,
	0xed, 0xcd, 0x7e, 0x99, 0x7c, 0xef, 0x79, 0x3c, 0x06, 0x3b, 0x11, 0xd4, 0x13, 0x09, 0x57, 0x1c,
	0x55, 0x13, 0x41, 0xdd, 0xde, 0x9a, 0xf3, 0x75, 0xc4, 0x46, 0x5a, 0x5a, 0xa6, 0xaf, 0x23, 0x15,
	0xc4, 0x4c, 0x2a, 0x12, 0x0b, 0x53, 0x35, 0x08, 0xa1, 0x3e, 0x27, 0x54, 0x61, 0xb6, 0x43, 0x7f,
	0xa1, 0x1a, 0xb2, 0x83, 0x63, 0xf5, 0xad, 0xa1, 0x8d, 0xb3, 0x25, 0xea, 0x42, 0x6d, 0x4f, 0xa2,
	0x94, 0x39, 0x15, 0xad, 0x99, 0x0d, 0x7a, 0x00, 0xfb, 0x48, 0x71, 0xaa, 0x7d, 0x6b, 0xd8, 0x1c,
	0xbb, 0x9e, 0xf1, 0xf1, 0x0a, 0x1f, 0x6f, 0x56, 0x54, 0xe0, 0xcf, 0xe2, 0x41, 0x08, 0x0d, 0x63,
	0x26, 0x05, 0xba, 0x85, 0x36, 0xe5, 0x71, 0x1c, 0xa8, 0x85, 0x4c, 0x29, 0x65, 0x52, 0x6a, 0xe3,
	0x06, 0x6e, 0x19, 0x75, 0x6a, 0xc4, 0xb2, 0x59, 0xe5, 0x12, 0xb3, 0x17, 0xb0, 0x7d, 0x8d, 0xca,
	0xcf, 0xf6, 0x16, 0xac, 0xb4, 0x45, 0x0d, 0x67, 0xcb, 0x2b, 0xc0, 0x73, 0x80, 0x02, 0x2c, 0xc5,
	0xb7, 0x92, 0x9f, 0xa1, 0xfd, 0xc4, 0x48, 0xa4, 0x36, 0xfe, 0x86, 0xd1, 0x30, 0xcb, 0x5d, 0x62,
	0x59, 0x97, 0xb0, 0x22, 0xe8, 0x94, 0x58, 0x52, 0x7c, 0x1d, 0x86, 0x7a, 0xd0, 0x94, 0x8a, 0xa8,
	0x54, 0x2e, 0x28, 0x5f, 0x99, 0x71, 0xa8, 0x61, 0x30, 0x92, 0xcf, 0x57, 0x6c, 0xe0, 0x43, 0x7d,
	0x12, 0x6c, 0xd7, 0xd7, 0x45, 0x66, 0xd0, 0x30, 0x90, 0x1f, 0xcd, 0x3a, 0x7e, 0xb7, 0x00, 0xf0,
	0xc4, 0x9f, 0xb2, 0x64, 0x1f, 0xd0, 0x6c, 0x9c, 0xff, 0x63, 0xb6, 0x4b, 0x99, 0x54, 0xb3, 0x84,
	0x6c, 0x25, 0xa1, 0x2a, 0xe0, 0xdb, 0x59, 0x72, 0x40, 0x7f, 0xbc, 0xec, 0x31, 0xe5, 0xaf, 0xc3,
	0x6d, 0x9d, 0xec, 0xa4, 0x18, 0x5a, 0x77, 0x16, 0x7a, 0x04, 0xe7, 0xfc, 0x4f, 0x33, 0x1a, 0xa8,
	0xad, 0xcb, 0x8f, 0x03, 0xe8, 0x76, 0x4a, 0x7b, 0x7d, 0xc0, 0xe6, 0xc9, 0xfd, 0xa0, 0x7f, 0xfa,
	0x7b, 0xf9, 0xf6, 0xdd, 0xee, 0xb9, 0x28, 0x05, 0xba, 0x81, 0x5f, 0x59, 0x9b, 0xf2, 0x7c, 0x79,
	0xdb, 0xf3, 0x7c, 0x45, 0xff, 0x96, 0xbf, 0x75, 0x93, 0xee, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x99, 0x0b, 0xef, 0xb6, 0x11, 0x04, 0x00, 0x00,
}
